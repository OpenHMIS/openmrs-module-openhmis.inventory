/*
 * The contents of this file are subject to the OpenMRS Public License
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://license.openmrs.org
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * Copyright (C) OpenMRS, LLC.  All Rights Reserved.
 */
define(
    [
        openhmis.url.backboneBase + 'js/view/generic',
        openhmis.url.inventoryBase + 'js/model/stockroom',
        openhmis.url.inventoryBase + 'js/model/inventoryStockTake',
        openhmis.url.inventoryBase + 'js/view/operation',
        'js!' + openhmis.url.inventoryBase + 'js/util.js',
        'link!' + openhmis.url.inventoryBase + 'css/style.css'
    ],

    function(openhmis) {
        openhmis.InventoryStockTakeAddEditView = Backbone.View.extend({
            edit: function() {/*make sure that list entries are not editable by clicking*/},
        });

        openhmis.InventoryStockTakeSearchableListView = openhmis.GenericSearchableListView.extend({
            tmplFile: openhmis.url.inventoryBase + 'template/inventoryStockTake.html',
            tmplSelector: '#inventory-stock-take-list',

            events: {
                'click .submit' : 'save',
                'click #show-details' : 'renderAdjustmentChangesDetail',
            },

            initialize: function(options) {
                openhmis.GenericSearchableListView.prototype.initialize.call(this, options);
                this.itemStockDetails = {};
                this.searchView.on('resetItemStockAdjustments', this.resetItemStockAdjustments);
            },

            resetItemStockAdjustments: function() {
            	this.itemStockDetails = {}
            },

            addOne: function(model, schema, lineNumber) {
                openhmis.GenericSearchableListView.prototype.addOne.call(this, model, schema, lineNumber);
                var self = this
                model.view.on('quantityChange', function() {
                    var uuid = this.model.get('uuid');
                    if(this.model.get('actualQuantity') != null
                            && this.model.get('actualQuantity') != "" && this.model.get('actualQuantity') != this.model.get('quantity')) {
                        self.itemStockDetails[uuid] = new openhmis.InventoryStockTakeEntity(this.model.attributes);
                    } else {
                        delete self.itemStockDetails[uuid];
                    }
                    self.renderAdjustmentChangesShort();
                });
                var uuid = model.get('uuid');
                $('.actual-quantity').forceNumericOnly();
                if (uuid in self.itemStockDetails) {
                    $('#actual-quantity-' + uuid).val(self.itemStockDetails[uuid].get('actualQuantity'));
                }
            },

            save: function () {
                var $operationNumber = "";
                if ($('.isOperationNumberAutoGenerated').val() != true) {
                    $operationNumber = prompt("Please enter an operation number for this stock take operation* (REQUIRED)");
                    if ($operationNumber == null || $operationNumber == "") {
                        alert("Please specify an operation number. The data has not been saved");
                        return;
                    }
                }
                var inventoryStockTake = new openhmis.InventoryStockTake();
                var itemStockDetailsArray = this.convertToArray(this.itemStockDetails)
                inventoryStockTake.set("operationNumber", $operationNumber);
                inventoryStockTake.set("inventoryStockTakeList", itemStockDetailsArray);

                inventoryStockTake.save(null, {
                    success: function(stockTakeDetails, resp) {

                    },
                    error: function(stockTakeDetails, resp) {
                        openhmis.error(resp);
                    }
                });
            },

            render: function() {
                openhmis.GenericSearchableListView.prototype.render.call(this);
                this.renderAdjustmentChangesShort();
            },

            renderAdjustmentChangesShort: function() {
                $('#message').remove();
                if(Object.keys(this.itemStockDetails).length > 0) {
                    $('#stockTakeDetailMessages').append('<div id="message">Changes made: ' + Object.keys(this.itemStockDetails).length +
                    		' <a id="show-details">Show Details</a></div><div id="render-detail"></div>');
                } else {
                    $('#stockTakeDetailMessages').append('<div id="message">No changes made yet</div>');
                }
            },

            renderAdjustmentChangesDetail: function() {
            	console.log('123');
                this.itemStockDetailsView = new openhmis.StockroomDetailList({
                    model: new openhmis.GenericCollection([], {
                        model: openhmis.OperationTransaction
                    }),
                    showRetiredOption: false,
                    showRetired: false,
                    listFields: ['item','expiration', 'quantity', 'actualQuantity'],
                    itemView: openhmis.OperationItemListItemView
                });
                $('#render-detail').after('123');
            },

            convertToArray: function(associativeArray) {
                var array = [];
                for (var key in associativeArray) {
                    array.push(associativeArray[key]);
                }
                return array;
            }
        });

        openhmis.InventoryStockTakeListItemView = openhmis.GenericListItemView.extend({
            tmplFile: openhmis.url.inventoryBase + 'template/inventoryStockTake.html',
            tmplSelector: '#inventory-stock-take-list-item',

            events: {
                'change .actual-quantity' : 'changeItemStockDetail',
            },

            changeItemStockDetail: function(event) {
                var inputValue = $(event.currentTarget).val();
                if (inputValue < 0) {
                    inputValue = 0;
                    $(event.currentTarget).val(inputValue);
                };
                this.model.set('actualQuantity', parseInt(inputValue));
                this.trigger('quantityChange', this);
            },
        });

        return openhmis;
    }
);